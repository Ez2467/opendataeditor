{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frictionless Application","text":"<p>Frictionless Application (beta) has been released on Apr 19, 2023 at csv,conf (LINK TO THE SLIDES)!</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>Currently, we're finishing packing the project as a Desktop application. Once it's done, you will be able to simply download and start it without running any commands</p> <p>To install a beta version of the Frictionless Application ensure that you have Python 3.8+ available and run this command:</p> Bash <pre><code>pip3 install frictionless[application]==5.13.0\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Warning</p> <p>Currently, we're finishing packing the project as a Desktop application. Once it's done, you will be able to simply download and start it without running any commands</p> <p>To start working with a data folder just run:</p> Bash <pre><code>frictionless application &lt;data-folder&gt;\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/04/17/csv-conf-7/","title":"Frictionless Application at csv,conf,7","text":"<p> Evgeny Karev \u2022\u00a0    \u2022\u00a0    Apr 17, 2023 \u2022\u00a0    15 min read</p> <p>Frictionless Application (beta) has been released on Apr 19, 2023 at csv,conf (LINK TO THE SLIDES)!</p> <p></p>"},{"location":"contributing/development/","title":"Development","text":"<p>Frictionless Application uses a client/server architecture. As a server, we use a Python codebase that uses Frictionless Framework for data and metadata processing. As a client, we use this codebase written in TypeScript that uses React for components and Zustand for state management.</p>"},{"location":"contributing/development/#prerequisites","title":"Prerequisites","text":"<p>To start working on the project:</p> <ul> <li>Python 3.10+</li> <li>Node 16+</li> </ul>"},{"location":"contributing/development/#installation","title":"Installation","text":"<p>Note</p> <p>For development orchestration we use Hatch for Python (defined in <code>pyproject.toml</code>) and NPM for JavaScript (defined in <code>package.json</code>). We use <code>make</code> to run joint commands (defined in <code>Makefile</code>)</p> <p>To start working on the project install the dependencies:</p> <pre><code>make install\n</code></pre>"},{"location":"contributing/development/#enviroment","title":"Enviroment","text":""},{"location":"contributing/development/#python","title":"Python","text":"<p>Before starting with the project we recommend configuring <code>hatch</code>. The following line will ensure that all the virtual environments will be stored in the <code>.python</code> directory in project root:</p> <pre><code>hatch config set 'dirs.env.virtual' '.python'\nhatch shell # Enter the venv\n</code></pre> <p>Now you can setup you IDE to use a proper Python path:</p> <pre><code>.python/fdapp/bin/python\n</code></pre>"},{"location":"contributing/development/#javascript","title":"JavaScript","text":"<p>We highly recommend enabling TypeScript checks for your IDE.</p>"},{"location":"contributing/development/#codebase","title":"Codebase","text":""},{"location":"contributing/development/#application","title":"Application","text":"<p>To work on the whole application:</p> <pre><code>make start\n</code></pre> <p>Note that there are few CSV files in the <code>data</code> folder to test the app. You can find more in the internet (it's good to test it using different files).</p>"},{"location":"contributing/development/#server","title":"Server","text":"<p>Running the server in isolation:</p> <pre><code>make server # default folder\n# OR\npython -m src.server &lt;data-folder&gt; # select project folder\n</code></pre>"},{"location":"contributing/development/#client","title":"Client","text":"<p>Running the client in isolation:</p> <pre><code>make client\n</code></pre>"},{"location":"contributing/development/#components","title":"Components","text":"<p>To work on individual components (StoryBook):</p> <pre><code>make components\n</code></pre>"},{"location":"contributing/development/#documentation","title":"Documentation","text":"<p>Documentation is written with Mkdocs (defined in <code>mkdocs.yaml</code>). The source articles are in the <code>docs</code> directory. To start a live-reload server:</p> <pre><code>make write\n</code></pre> <p>Building the docs:</p> <pre><code>make docs\n</code></pre>"},{"location":"integrating/library/","title":"Library","text":"<p>Within the Frictionless Application project we publish set of metadata components for working with Frictionless Standards. You can test it here: https://metadata.frictionlessdata.io/</p>"},{"location":"integrating/library/#npm","title":"NPM","text":"<p>Install the library as you usually do with NPM:</p> <pre><code>$ npm install @frictionlessdata/application\n</code></pre> <p>The package provides a set of components and a render function to render it to the DOM:</p> <pre><code>import {render} from '@frictionlessdata/application/render'\nimport Report from '@frictionlessdata/application/components/Editors/Report'\nconst props = {report}\nconst element = document.getElementById('app')\nrender(Report, props, element)\n</code></pre>"},{"location":"integrating/library/#cdn","title":"CDN","text":"<p>Alternatively, it might be linked directly from the CDN (available distributions):</p> <pre><code>&lt;script src=\"//unpkg.com/@frictionlessdata/application/dist/metadata/metadata.js\"&gt;&lt;/script&gt;\n&lt;div id=\"schema\"&gt;&lt;/div&gt;\n&lt;script&gt;\nif (document.readyState === 'loading') window.addEventListener(\"load\", () =&gt; {\nconst props = {descriptor, onChange: (descriptor) =&gt; console.log(descriptor)}\nconst element = document.getElementById('metadata')\nfrictionlessMetadata.render(frictionlessMetadata.Schema, props, element)\n})\n&lt;/script&gt;\n</code></pre>"}]}